import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from datetime import datetime
import dateparser
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

async def on_startup(dp):
    scheduler.start()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ üß†\n\n"
        "–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "- `–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞ –≤ 19:00: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ`\n"
        "- `–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:30: –ó–∞—Ä—è–¥–∫–∞`\n"
        "- `–ö–∞–∂–¥–æ–µ 15-–µ —á–∏—Å–ª–æ –≤ 12:00: –û–ø–ª–∞—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω`\n",
        parse_mode="Markdown",
        reply_markup=kb
    )

@dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def ask_text(message: types.Message):
    await message.answer(
        "–ù–∞–ø–∏—à–∏:\n"
        "- `–ù–∞–ø–æ–º–Ω–∏ –≤ [–¥–∞—Ç–∞/–≤—Ä–µ–º—è]: [—Ç–µ–∫—Å—Ç]`\n"
        "- –∏–ª–∏ `–ö–∞–∂–¥—ã–π [–¥–µ–Ω—å/–¥–∞—Ç–∞] –≤ [–≤—Ä–µ–º—è]: [—Ç–µ–∫—Å—Ç]`\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "- `–ù–∞–ø–æ–º–Ω–∏ 7 –∞–ø—Ä–µ–ª—è –≤ 18:00: –ü–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ`\n"
        "- `–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:00: –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–±–µ–∂–∫–∞`\n"
        "- `–ö–∞–∂–¥–æ–µ 1-–µ —á–∏—Å–ª–æ –≤ 09:00: –ü–æ–¥–∞—Ç—å –æ—Ç—á—ë—Ç`"
    )

@dp.message_handler()
async def handle_input(message: types.Message):
    text = message.text.strip().lower()
    user_id = message.from_user.id

    try:
        if text.startswith("–∫–∞–∂–¥"):
            # –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await handle_recurring_reminder(message)
        elif text.startswith("–Ω–∞–ø–æ–º–Ω–∏"):
            # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await handle_one_time_reminder(message)
        else:
            await message.answer("–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ üôà")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def handle_one_time_reminder(message):
    content = message.text[7:].strip()
    if ":" not in content:
        await message.answer("–§–æ—Ä–º–∞—Ç: `–ù–∞–ø–æ–º–Ω–∏ [–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è]: [—Ç–µ–∫—Å—Ç]`")
        return

    when_part, text = content.split(":", 1)
    dt = dateparser.parse(when_part.strip(), languages=["ru"])

    if not dt:
        await message.answer("–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –¥–∞—Ç—É üò¢ –ü–æ–ø—Ä–æ–±—É–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ `7 –∞–ø—Ä–µ–ª—è –≤ 18:00`.")
        return

    scheduler.add_job(
        send_reminder,
        DateTrigger(run_date=dt),
        args=[message.chat.id, text.strip()],
    )

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {dt.strftime('%d.%m.%Y %H:%M')}:\n{text.strip()}")

async def handle_recurring_reminder(message):
    text = message.text
    if ":" not in text:
        await message.answer("–§–æ—Ä–º–∞—Ç: `–ö–∞–∂–¥—ã–π [–¥–µ–Ω—å/–¥–∞—Ç–∞] –≤ [–≤—Ä–µ–º—è]: [—Ç–µ–∫—Å—Ç]`")
        return

    before_colon, reminder_text = text.split(":", 1)
    reminder_text = reminder_text.strip()

    if "–≤" not in before_colon:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üòï")
        return

    pattern_part, time_part = before_colon.split("–≤")
    time_part = time_part.strip()
    hour, minute = map(int, time_part.split(":"))

    cron_args = {}

    if "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫" in pattern_part:
        cron_args["day_of_week"] = "mon"
    elif "–≤—Ç–æ—Ä–Ω–∏–∫" in pattern_part:
        cron_args["day_of_week"] = "tue"
    elif "—Å—Ä–µ–¥–∞" in pattern_part:
        cron_args["day_of_week"] = "wed"
    elif "—á–µ—Ç–≤–µ—Ä–≥" in pattern_part:
        cron_args["day_of_week"] = "thu"
    elif "–ø—è—Ç–Ω–∏—Ü–∞" in pattern_part:
        cron_args["day_of_week"] = "fri"
    elif "—Å—É–±–±–æ—Ç–∞" in pattern_part:
        cron_args["day_of_week"] = "sat"
    elif "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" in pattern_part:
        cron_args["day_of_week"] = "sun"
    elif "1-–µ" in pattern_part or "1–µ" in pattern_part:
        cron_args["day"] = 1
    elif "15-–µ" in pattern_part or "15–µ" in pattern_part:
        cron_args["day"] = 15
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª —à–∞–±–ª–æ–Ω –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è üòÖ –ü–æ–ø—Ä–æ–±—É–π: '–ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–ö–∞–∂–¥–æ–µ 1-–µ —á–∏—Å–ª–æ'.")
        return

    job_id = f"{message.chat.id}_{reminder_text}_{hour}{minute}"
    scheduler.add_job(
        send_reminder,
        CronTrigger(hour=hour, minute=minute, **cron_args),
        args=[message.chat.id, reminder_text],
        id=job_id,
        replace_existing=True
    )

    await message.answer(f"üîÅ –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {reminder_text} –≤ {hour:02}:{minute:02}")

async def send_reminder(chat_id, text):
    await bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
